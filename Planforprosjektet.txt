Framskrittsplan:
1. Index-page with a list of all products with pictures
2. Product page: click on a product to get more info and pictures, and see the price
3. Add to cart/buy button, including visual and actual change in shoppingcart
4. Proceed to checkout/buy(visible and accessible)
5. Show the entire shoppingcart with total price, perhaps add some bonuses
6. Implement functionality for admin-user
7. Create a docker for database and backend
8. Kan adde en varebeholdning slik at ting kan være tomt, og når man kjøper en vare forsvinner en fra lageret

Frontend:
1. Create index-page
2. Create a product page for each product
3. Create shoppingcart
4. Create buttons to purchase

Backend:
1. Create methods to fetch data from database
2. Create methods to send data to frontend
3. Create methods to add new products as admin
4. Add the possibility to see purchase-history

Database:
1. Create a database(MySQL or MongoDB)
2. Deploy exampledata into DB


Ideer:
1. Lagre handlevognen sin?

Kilder for JQUERY:
https://css-tricks.com/practical-use-cases-for-javascripts-closest-method/

Dependencies: (pip3 install _____)
- pymongo
- jsonpickle
- dnspython
pip install mysql-connector-python
pip install --user flask-mysqldb


Gard fikse 15.05: 
- Fikse slik at hvis man trykker på et bilde av fruktene så fetcher den info om den frukten fra databasen, med nye bilder også, alt i en pop-up

Opprette alt så det funker med backend
Opprette database
Skrive om litt på backend
Fetche på javascripts
flere metoder på backend
Lagre bestillinger



Kode for docker:
for backend: docker run -it --rm --name pyback --network sqlnetwork -p 5000:5000 -v $(pwd)/backend/server.py:/var/fullstack/server.py -v $(pwd)/frontend/:/var/fullstack/frontend -t python_backend python /var/fullstack/server.py

for database: docker run -it --rm --name mysql1 --network sqlnetwork -e MYSQL_ROOT_PASSWORD=my-secret-pw -v $(pwd)/database:/docker-entrypoint-initdb.d mysql 
